DPUT(5)
=======
:doctype: manpage


NAME
----
dput - configuration file format for dput-ng


DESCRIPTION
-----------

*dput* supports two configuration file formats. The old-style configuration
format was originally introduced by dput and is described in *dput.cf(5)*.
This manpage describes new-style configuration files only. All details are
covered in in </usr/share/doc/dput-ng/html/reference/configs.html> which is
available in the dput-ng-doc package. 

FILES AND FORMAT
----------------

Upload targets are configured using JSON as described in *RFC 4627*. In a
nutshell, *dput* configuration allows insignificant whitespace before or after
any type statement. Each upload profile is stored in its own file and is
represented as  a pair of curly brackets surrounding name/value pairs described
below. Both, name and values are strings. A single colon separates the name
from the value. A string begins and ends with quotation marks and may be
escaped. Booleans are either 'true' or 'false' (mind these are not surrounded
by quotation marks). 

Some keys names are accepting lists as possible value. A list is represented
as square brackets surrounding zero or more values, separated by commas.

*dput* reads, in order, these directories:

 1. '/usr/share/dput-ng/'
 2. '/etc/dput.d/'
 3. '~/.dput.d/'
 4. The directory supplied via command line argument

In general, packages are installing pre-defined defaults for popular upload 
targets to '/usr/share/dput-ng/profiles/'. System administrators who wish to
override or create a new system-wide and shared target for many users may
choose '/etc/dput.d/profiles'. Finally, local targets may be written to
'~/.dput.d/profiles' for personal upload targets.


Within each configuration directory, there may be another tier of
configuration directories. There, these actual configuration directories may
exist:

 * *metas/* define super-classes of upload profiles. They can define any name
   and value known to profiles (see below) which are shared across profiles.

 * *profiles/* define upload profiles. Files therein are looked-up by their
   name as 'HOST' argument by *dput*. This is, where upload hosts are defined.

Moreover, these directories can exist and are documented here for the sake of
completeness. However, users typically do not need to touch these unless you
are developing or customizing existing plug-ins to *dput* or *dcut*

 * *checkers/* define entry hooks to checker functions which are registered for
   use with *dput*. See *CHECKERS* below.

 * *commands/* define entry hooks to command functions which are registered for
   use with *dcut*.

 * *interfaces/* define entry hooks to user interface functions which are
   registered for use with *dput* and *dcut*. They are responsible to retrieve
   data from the user.

 * *processor/* define entry hooks to processor functions which are registered
   for use with *dput*. See *PROCESSORS* below.
 

By default, *all* configuration file locations are parsed, and overlayed in a
additive manner. This way both, entire profiles and actual settings within a
profile is inherited from any parent location defining a key within the current
scope.

By default, keys will override any previously defined value. However, as a
special case, there are two operators (*+* and *-*) that may be prefixed to
names to merge with existing inherited values. This is beneficial when a
profile wishes to add or remove *checkers* or *processors* to an existing
profile that is inheriting values via it's meta-class or parent.

PROFILES
---------

Profiles are indexed as '<profile name>.json' within the 'profiles/'
configuration directory. may define these keys.

Following is an example configuration for a local upload profile, named
"'localhost.json'".

    {
        "+checkers": [
            "lintian"
        ],
        "-checkers": [
            "gpg"
        ],
        "incoming": "~/incoming",
        "meta": "debian",
        "method": "local",
        "run_lintian": true
    }


Supported keys are:

*allow_dcut* (boolean)::

This defines if you are allowed to upload a dcut changes file to the queue to
remove or move files. See *dcut(1)*.

*allow_unsigned_uploads* (boolean)::

This defines if you are allowed to upload files without a GnuPG signature to
this host or not.

*allowed_distributions* (string)::

A regular expression (of Python re module syntax) that the distribution field
must match or dput will refuse the upload.

*checkers* (list of string)::

Defines a list of checkers which are running before the upload. See *CHECKERS*
below.

*default_host_main* (string)::

This defines the default host for packages that are allowed to be uploaded to
the main archive. This variable is used when guessing the host to upload to.


*fqdn* (string)::

This is the fully qualified domain name that *dput* will connect to as a target
site.

*distributions* (string)::

This defines a comma-separated list of distributions that this host accepts,
used to guess the host to use when none is given on the command line.

*hash* (string)::
              
The hash algorithm that should be used in calculating the checksum of the
files before uploading them. Currently, dput accepts the following values
for hash:

	* 'sha1':: Perform validation of the SHA-1 hash (default when omitted)
	* 'sha256':: Perform validation of the SHA-256 hash
	* 'md5':: Perform validation of the MD5 hash

*interface* (string)::

write me

*incoming* (string)::

The directory that *dput* should upload files to. Most upload sites do not
allow to write files in the log-in directory. Specify a path here, to which
*dput* should change the directory to, before starting to write files.

*method* (string)::

Use the specified method to upload your package. Currently these alternatives
are supported:

	* 'ftp':: Use FTP to upload files
	* 'http' or 'https':: Use HTTP or HTTPS to upload files
	* 'local':: Upload to a locally mounted location of the file system.
	  Internally this calls *install(1)*. 
	* 'scp':: Use scp to upload files. *This method is deprecated*, use 'sftp'
		instead when possible.
	* 'sftp':: Use the sftp protocol (a secured file transfer via SSH).
	
	* *dput-ng* does not support 'rsync'.

*login* (string)::

Your login on the machine named before. A single asterisk '*' will cause the
'scp', 'sftp' and uploaders to not use supply a login name when calling trying
to authenticate.


*meta* (list of string)::

Specify a list of super classes from which the profile should inherit settings
explicitly. This is different to the 'DEFAULT.json' profile in such that this
defines settings conditionally, and not for all profiles. 

*passive_ftp* (boolean)::

This  option  defines whether *dput* should use passive or active FTP for
uploading a package to one of the upload queues. This name is only meaningful
when 'method' is set to 'ftp'.

*post_upload_command* (string)::

This option defines a command to be run by dput after a successful upload. The
command is invoked via the shell and does not get passed any argument. See
*PROCESSORS* for more sophisticated approaches which are integrated in the
upload process.


*pre_upload_command* (string)::

This option defines a command to be run by dput before an upload. The
command is invoked via the shell and does not get passed any argument. See
*CHECKERS* for more sophisticated approaches which are integrated in the
upload process and can gracefully interrupt the upload process.


*processors* (list of string)::

Defines *PROCESSORS* which shall be run after a successful upload.


*run_lintian* (boolean)::

This option defines if lintian should be run before the package will be
uploaded or not.  *This setting is deprecated* but works as a fallback to the
corresponding *CHECKER*. The Lintian checker allows much more fine grained
control over the Lintian invocation.


CHECKERS AND PROCESSORS
------------------------

<write some introductory sentence>


PROFILES AND INHERITANCE
------------------------

<write some introductory sentence>

Profiles
~~~~~~~~

write me

Meta-Classes
~~~~~~~~~~~~

Configuration files may declare an optional *meta* key, who's value is the
name of a meta-configuration to be placed under this configuration. You can
check for meta-configuration in */usr/share/dput-ng/metas*, */etc/dput.d/metas*
or *~/.dput.d/metas*. This helps declare common settings (such as general
Debian archive configuration values (GPG requirements, enforcing
that binary files exist, etc) without having to maintain may of the
same values in many places).

OVERRIDING SINGLE VALUES
~~~~~~~~~~~~~~~~~~~~~~~~

Here's an example stanza from a local dput config to remove an annoying
checker from being run, sitting in *~/.dput.d/profiles/ftp-master.json*

    {
        "-checkers": [
            "lintian"
        ]
    }


FILES
-----

     /usr/share/dput-ng/
     /etc/dput.d/
     ~/.dput.d/

AUTHOR
------
dput-ng was originally written by `Arno TÃ¶ll <arno(a)debian.org>` and `Paul
Richard I by the Grace of God of the United Kingdom of Debian and Ubuntu and
of his other realms and territories King Head of the Fluxbox Window Manager
Defender of the Faith Tagliamonte <paultag(a)debian.org>`.


RESOURCES
---------

*RFC 4627*