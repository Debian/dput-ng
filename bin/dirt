#!/usr/bin/env python
# D.I.R.T.

# arguments:
#    --blame target
#    --hosts
#    --help-checker
#    --help-processor

import argparse
import json
import sys

from dput.hook import hook_docs
from dput.profile import get_blame_map, profiles, load_profile
from dput.exceptions import DputConfigurationError

parser = argparse.ArgumentParser(description=' dput information retrieval tool')
group = parser.add_mutually_exclusive_group()

group.add_argument(
    '--hosts',
    action='store_true',
    help='print the lists of hosts that dput knows about'
)

group.add_argument(
    '--blame',
    action='store',
    help='get information on where dput is finding keys'
)

group.add_argument(
    '--info',
    action='store',
    help='get some help on a hook'
)

args = parser.parse_args()

if args.blame:
    if args.blame not in profiles():
        print "No such target."
        sys.exit(1)

    print json.dumps(get_blame_map(args.blame), sort_keys=True, indent=4)
    sys.exit(0)

if args.hosts:
    default = load_profile(None)
    print
    print "Default method: %s" % (default['method'])
    print
    for config in profiles():
        obj = load_profile("%s:%s" % (config, config))
        #                               ^^^^^^ fake arg for others
        if not "fqdn" in obj:  # likely localhost
            obj['fqdn'] = 'localhost'

        string = "{name} => {fqdn}  (Upload method: {method})".format(**obj)
        print string
    print
    sys.exit(0)


if args.info:
    try:
        docs = hook_docs(args.info)
        if docs == "":
            print "Sorry, the author didn't provide help on this module."
            sys.exit(0)
        print docs
    except DputConfigurationError:
        print "No such hook '%s'." % (args.info)
        sys.exit(1)
