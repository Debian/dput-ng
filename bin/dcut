#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

# Copyright (c) 2012 dput authors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


"""
blackhole for a dcut concept:

- use the dput concept, in particular uploaders can be used as is for dcut
- checker for dcut, e.g. if a file targeted for removal actually exists in the
  queue?
- generic command support, maybe support even commands not explicitly known
  to dcut - ng?
- (How to) handle signing?

Existing commands:

rm
reschedule
cancel
dm


Syntax of command files:

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Archive: ftp.debian.org
Uploader: A Developer < adeveloper@example.com > (optional)

Commands:
 (rm | reschedule | cancel) < file | changes_file >

Action: dm
Fingerprint: < DM fingerprint >
Allow: < source_package >
Deny: < source_package >
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Filename is:

# $login-$timestamp.dak[.-]commands
"""


import sys
import argparse

# A little temporary hack for those of us not using virtualenv
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

import dput.core
import dput.exceptions
import dcut.uploader
from dcut import upload

parser = argparse.ArgumentParser(description=' Debian archive command file'
                                 'upload tool')
parser.add_argument('-d', '--debug', action='count', default=False,
                    help="Enable debug messages. Repeat twice to increase the"
                    "verbosity level")
parser.add_argument('-c', '--config', metavar="FILE", action='store',
                    default=None, help='Configuration file to parse')
parser.add_argument('host', metavar="HOST", action='store', default=None,
                    help="Target host to upload a package", nargs="?")
subparsers = parser.add_subparsers(help='Supported commands')

command_registry = dcut.uploader.load_commands()

for command in command_registry:
    (cmd_name, cmd_purpose) = command.name_and_purpose()
    command_parser = subparsers.add_parser(cmd_name, help=cmd_purpose)
    command_parser.set_defaults(command=command)
    command.register(command_parser)

args = parser.parse_args()


if args.config:
    dput.core.DPUT_CONFIG_LOCATIONS.append(args.config)

if args.debug:
    dput.core._enable_debugging(args.debug)


upload(args)
